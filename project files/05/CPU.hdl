// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	Mux16(a=aRegOut, b=outALU, sel=instruction[5],  out=defVal);		//Checks whether outM should be stored in regA; if not, default to aOut
	Mux16(a=instruction, b=defVal, sel=instruction[15], out=instOut);	//Check whether loading instruction to A reg or defVal
	
	//Checks whether A instruction or C instruction that stores the OutM to A register
	Not(in=instruction[15],out=aInstructionTrue);
	Or(a=aInstructionTrue, b=instruction[5], out=loadA);
	
	ARegister(in=instOut, load=loadA, out=aRegOut);			//A REGISTER
	Mux16(a=aRegOut, b=inM, sel=instruction[12], out=yForALU);	//Check whether y input for ALU should be M or A 
	
	And(a=instruction[4],b=instruction[15], out=loadD);		//Checks if D register is supposed to be loaded
	DRegister(in=outALU, load=loadD, out=dRegOut);			//D REGISTER
	
	//ALU CHIP; x= D register, y= A|M register, nx-no=Instruction[10..6]
	ALU(x=dRegOut, y=yForALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zrALU, ng=ngALU);
	And16(a=outALU, b=outALU, out=outM);				//Copy ALU out to push to outM and to A and D Register
	
	//Check if C instruction and if it should write to M
	And(a=instruction[3], b=instruction[15], out=writeM);
	
	//Dupe aRegOut and connect to addressM
	And16(a=aRegOut, b=aRegOut, out[0..14]=addressM);
		
	//Check whether PC should be loaded a value JUMP LOGIC UNIT
	JumpLogicUnit(zr=zrALU, ng=ngALU, instructionType=instruction[15], inst=instruction[0..2], loadOut=ldPC, incOut=incPC);

	PC(in=aRegOut, load=ldPC, inc=incPC, reset=reset, out[0..14]=pc);	//Output the next address value to pc 

}
